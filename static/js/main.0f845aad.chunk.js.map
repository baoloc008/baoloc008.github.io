{"version":3,"sources":["App.js","index.js"],"names":["window","THREE","Stats","WEBGL","App","container","stats","camera","scene","renderer","composer","loader","onWindowResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","isWebGLAvailable","document","body","appendChild","getWebGLErrorMessage","Scene","background","Color","createElement","PerspectiveCamera","position","set","lookAt","OrbitControls","WebGLRenderer","setPixelRatio","devicePixelRatio","domElement","dom","EffectComposer","renderPass","RenderPass","copyPass","ShaderPass","CopyShader","addPass","colorCorrectionPass","ColorCorrectionShader","uniforms","value","Vector3","vignettePass","VignetteShader","renderToScreen","addEventListener","init","SEA3D","autoPlay","progressive","onComplete","load","clock","Clock","animate","dlt","delta","getDelta","requestAnimationFrame","AnimationHandler","update","render","react_default","a","Component","ReactDOM","src_App","getElementById"],"mappings":"qMAGgCA,QAAxBC,UAAOC,UAAOC,UA6EPC,8LAtEX,IAAIC,EAAWC,EACXC,EAAQC,EAAOC,EAAUC,EACzBC,EA4CJ,SAASC,IACPL,EAAOM,OAASb,OAAOc,WAAad,OAAOe,YAC3CR,EAAOS,yBACPN,EAASO,QAAQjB,OAAOc,WAAYd,OAAOe,aAC3CN,EAASQ,QAAQjB,OAAOc,WAAYd,OAAOe,cArDZ,IAA7BZ,EAAMe,oBACRC,SAASC,KAAKC,YAAYlB,EAAMmB,wBAelC,YACEd,EAAQ,IAAIP,EAAMsB,OACZC,WAAa,IAAIvB,EAAMwB,MAAM,SACnCpB,EAAYc,SAASO,cAAc,OACnCP,SAASC,KAAKC,YAAYhB,IAC1BE,EAAS,IAAIN,EAAM0B,kBAAkB,GAAI3B,OAAOc,WAAad,OAAOe,YAAa,EAAG,MAC7Ea,SAASC,IAAI,IAAM,IAAM,KAChCtB,EAAOuB,OAAO,EAAG,EAAG,GACT,IAAI7B,EAAM8B,cAAcxB,IACnCE,EAAW,IAAIR,EAAM+B,eACZC,cAAcjC,OAAOkC,kBAC9BzB,EAASQ,QAAQjB,OAAOc,WAAYd,OAAOe,aAC3CV,EAAUgB,YAAYZ,EAAS0B,YAC/B7B,EAAQ,IAAIJ,EACZG,EAAUgB,YAAYf,EAAM8B,KAE5B1B,EAAW,IAAIT,EAAMoC,eAAe5B,GACpC,IAAI6B,EAAa,IAAIrC,EAAMsC,WAAW/B,EAAOD,GACzCiC,EAAW,IAAIvC,EAAMwC,WAAWxC,EAAMyC,YAC1ChC,EAASiC,QAAQL,GACjB,IACIM,EAAsB,IAAI3C,EAAMwC,WAAWxC,EAAM4C,uBACrDD,EAAoBE,SAApB,OAAuCC,MAAQ,IAAI9C,EAAM+C,QAFhD,aAGTJ,EAAoBE,SAApB,OAAuCC,MAAQ,IAAI9C,EAAM+C,QAHtC,aAInBtC,EAASiC,QAAQC,GACjB,IAAIK,EAAe,IAAIhD,EAAMwC,WAAWxC,EAAMiD,gBAC9CD,EAAaH,SAAb,SAAkCC,MAAQ,EAC1CrC,EAASiC,QAAQM,GACjBvC,EAASiC,QAAQH,GACjBA,EAASW,gBAAiB,EAE1BnD,OAAOoD,iBAAiB,SAAUxC,GAAgB,GAxCpDyC,IACA1C,EAAS,IAAIV,EAAMqD,MAAM,CACvBC,UAAU,EACVlD,UAAWG,EACXgD,aAAa,KAERC,WAAa,aAEpB9C,EAAO+C,KAAK,iCAwCZ,IAAIC,EAAQ,IAAI1D,EAAM2D,OACtB,SAASC,IACP,IAMcC,EANVC,EAAQJ,EAAMK,WAClBC,sBAAsBJ,GACtB5D,EAAMqD,MAAMY,iBAAiBC,OAAOJ,GAItBD,EAHPC,EAIPrD,EAAS0D,OAAON,GAHhBxD,EAAM6D,SAKRN,oCAGA,OAAOQ,EAAAC,EAAA5C,cAAA,mBAvEO6C,aCDlBC,IAASJ,OAAOC,EAAAC,EAAA5C,cAAC+C,EAAD,MAAStD,SAASuD,eAAe","file":"static/js/main.0f845aad.chunk.js","sourcesContent":["import './app.css';\nimport React, { Component } from 'react';\n\nconst { THREE, Stats, WEBGL } = window;\n\nclass App extends Component {\n  componentDidMount() {\n    if (WEBGL.isWebGLAvailable() === false) {\n      document.body.appendChild(WEBGL.getWebGLErrorMessage());\n    }\n    var container, stats;\n    var camera, scene, renderer, composer, controls;\n    var loader;\n    // Initialize Three.JS\n    init();\n    loader = new THREE.SEA3D({\n      autoPlay: true, // Auto play animations\n      container: scene, // Container to add models\n      progressive: true // Progressive download\n    });\n    loader.onComplete = function() {\n    };\n    loader.load('./models/mascot.draco.tjs.sea');\n    function init() {\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x333333);\n      container = document.createElement('div');\n      document.body.appendChild(container);\n      camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n      camera.position.set(1000, 1000, 1000);\n      camera.lookAt(0, 0, 0);\n      controls = new THREE.OrbitControls(camera);\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(renderer.domElement);\n      stats = new Stats();\n      container.appendChild(stats.dom);\n      // post-processing\n      composer = new THREE.EffectComposer(renderer);\n      var renderPass = new THREE.RenderPass(scene, camera);\n      var copyPass = new THREE.ShaderPass(THREE.CopyShader);\n      composer.addPass(renderPass);\n      var vh = 1.4, vl = 1.2;\n      var colorCorrectionPass = new THREE.ShaderPass(THREE.ColorCorrectionShader);\n      colorCorrectionPass.uniforms['powRGB'].value = new THREE.Vector3(vh, vh, vh);\n      colorCorrectionPass.uniforms['mulRGB'].value = new THREE.Vector3(vl, vl, vl);\n      composer.addPass(colorCorrectionPass);\n      var vignettePass = new THREE.ShaderPass(THREE.VignetteShader);\n      vignettePass.uniforms['darkness'].value = 1.0;\n      composer.addPass(vignettePass);\n      composer.addPass(copyPass);\n      copyPass.renderToScreen = true;\n      // events\n      window.addEventListener('resize', onWindowResize, false);\n    }\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      composer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n    var clock = new THREE.Clock();\n    function animate() {\n      var delta = clock.getDelta();\n      requestAnimationFrame(animate);\n      THREE.SEA3D.AnimationHandler.update(delta);\n      render(delta);\n      stats.update();\n    }\n    function render(dlt) {\n      composer.render(dlt);\n    }\n    animate();\n  }\n  render() {\n    return <div />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}